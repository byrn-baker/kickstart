# Templated with the contents of /run/akamai/shared/amc.yaml
install
lang en_US.UTF-8
keyboard us
timezone UTC
text
auth --useshadow --enablemd5
selinux --disabled
firewall --disabled
services --enabled=sshd,salt-minion,ipset,iptables,ip6tables --disabled=firewalld,NetworkManager
eula --agreed
reboot 

# Format the main disk drive.
# For Akamai usage, sizes and partitions cribbed from
# bootmanager/source/configuration and .../steps/InstallPartitionDisks.py

# LVM config
# Produced in the %pre script
%include /tmp/partition.cmd

# The encrypted text is the passwd field from /etc/shadow
rootpw --iscrypted $1$7yTIcczg$dMmy6DeUKMfhKmsS/wuFi0
# Also allow root to login during Anaconda startup w. password
sshpw --username=root $1$7yTIcczg$dMmy6DeUKMfhKmsS/wuFi0 --iscrypted

# This account is used by the installation from the AMC...
# FIXME: Should we generate the encryption, or put it here in the clear?
user --name=site_admin --groups=wheel --password=$1$xpsJqxnE$GY3dW4pZryTRMCP.l3JC.1 --iscrypted --uid=1000
# Also allow site_admin to login during Anaconda startup w. password
sshpw --username=site_admin 1$xpsJqxnE$GY3dW4pZryTRMCP.l3JC.1 --iscrypted

# Produced in the %pre script
%include /tmp/network.cmd

# Include repository definitions.
url --url=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/centos/7/os/x86_64/
repo --name=ins_epel     --cost 10 --baseurl=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/epel/7/x86_64/
repo --name=ins_extras   --cost 10 --baseurl=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/extras/7/x86_64/
repo --name=ins_updates  --cost 10 --baseurl=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/centos/7/updates/x86_64/
repo --name=ins_os       --cost 10 --baseurl=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/centos/7/os/x86_64/
repo --name=ins_aura     --cost 10 --baseurl=http://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/install-rpms/archive/coblitz/coblitz-centos7-x86_64/RPMS/


%packages --nobase --excludedocs
@core
wget
squashfs-tools
nacl-node-c7
akamai-release
grubby
node-installer-node
iptables
iptables-services
ipset
ipset-service
psmisc
aura-udev-rules
traceroute
%end

# If this script fails, the install fails.
%pre-install --erroronfail --log /tmp/ks-pre-install-repocheck.log
#! /bin/bash 
set -v
set -x

# If /proc/cmdline has aura_boot_stage set to reinstall or upgrade, curl yum repomd.xml on AMC.
# If that fails then keep retrying until someone fix the problem.
# If /proc/cmdline does not have aura_boot_stage set then move on (a new installation).
python - https://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab/repo/centos/7/os/x86_64 << __EOF__
import os
import re
import subprocess
import sys
import time
from urllib2 import urlparse as parse

def check(url):
    def _write_msg(msg):
        os.write(tfd, '%s  %s'%(msg,wheel[counter%4]))
        return len(msg) + len(wheel[counter%4]) + 2

    def _clear_msg(s):
        for i in range(0,s):
            os.write(tfd, '\b')

    try:
        tty=subprocess.check_output(['/usr/bin/tty']).strip()
    except Exception,e:
        tty='/dev/pts/0'
    tfd=os.open(tty, os.O_NOCTTY | os.O_RDWR)        

    cmd=['curl', '--insecure', '--silent', '--output', '/dev/null', '--write-out', '%{http_code}', url]

    p = parse.urlparse(url)
    hostname=p.netloc
    if "@" in hostname:
        hostname=hostname.split("@")[1]

    os.write(tfd, "Validating yum repo reachability to %s : "%hostname)
    counter = 0
    last_check = 0
    wheel = ['|', '/', '-', '\\\\']
    msg=''
    msg_len = 0
    status = 0
    while True:
        try:
            #check reachability every 5 seconds
            if time.time() - last_check > 5:
                last_check = time.time()
                status = int(subprocess.check_output(cmd))
        except Exception,e:
            status = 0

        if msg_len > 0:
            _clear_msg(msg_len)
        if status == 0:
            msg = "Bad Network!    "
            msg_len = _write_msg(msg)
        elif status == 403:
            msg = "YUM - Forbidden "
            msg_len = _write_msg(msg)
        elif status == 200:
            msg = "YUM - OK!       "
            msg_len = _write_msg(msg)
            break
        else:
            msg = "YUM - %i"%status
            msg_len = _write_msg(msg)
        counter += 1
        time.sleep(0.5)
    os.write(tfd, "\n")
    if tfd > 0:
        os.close(tfd)

with open('/proc/cmdline') as fp: cmdline = fp.read().strip()
abs_types = re.findall('aura_boot_stage=[\S]*', cmdline, re.DOTALL)
hands_off = any([abs_type.split("=")[1] in ['reinstall','upgrade'] for abs_type in abs_types])

if hands_off:
   base_repo=sys.argv[1]
   test_url=os.path.join(base_repo,'repodata/repomd.xml')
   check(test_url)
sys.exit(0)
__EOF__
%end

# Write out the network command.
# If remote, just the hostname, else Anaconda will set the hostname
# to "localhost.localdomain" which messes things up.
# nameserver is set to the MIPs.
# Rewritten to point to dnsmasq later on.
# Configured nameserver(s) written by salt on first highstate.

# If this script fails, the install fails.
%pre --erroronfail --log /tmp/ks-pre-network.log
#! /bin/bash 
set -e
set -v
set -x

python << __EOF__
import netaddr
import re
import socket
import sys

class ksnetwork(object):
    def __init__(self, cmdline):
        self.cmdline = cmdline
        hostname = socket.gethostname()
        self.hostname = hostname if not hostname.startswith('localhost') else None
        self.ifnames={}

    def get_hostname(self):
        return "" if self.hostname == None else " --hostname=%s" % self.hostname

    def process_ifname(self, line):
        # process ifname=interface:MAC
        ifnames = re.findall('ifname=[\S]*',line, re.DOTALL)        
        for ifname in ifnames:
            ifname=ifname[len("ifname="):]
            fields=ifname.split(":")
            interface=fields[0]
            mac=":".join(fields[1:])
            self.ifnames[ifname]=mac
            # ib = internet boot prefixed interface name
            if ifname.startswith("ib"):
                self.ifnames[ifname[2:]]=mac

    def process_ip(self, line):
        self.process_ifname(line)

        # process ip=
        # eg., ip=10.2.175.130::10.2.175.129:255.255.255.224:mtrl02ehpc001.lcdnstaging.iptv.example.local:lag_mgmt0:none 
        ips = re.findall('ip=[\S]*',line, re.DOTALL)
        # pick out the last ip=, if there is more than one
        ip = "" if len(ips)==0 else ips[-1][3:]
        fields = ip.split(":")
        buf=""
        device=""
        if len(fields)==7:
            buf += " --onboot=yes"
            buf += " --activate"
            ip=fields[0]
            buf += " --ip=%s"%ip
            buf += " --gateway=%s"%fields[2]
            netmask=fields[3]
            # REVISIT: Workaround for NM bug with RFC3021 /31.
            if netmask == "255.255.255.254":
                # adjust netmask to the smallest non-/31 CIDR block
                # that spans the node's IP and gateway
                nip=netaddr.IPAddress(ip)
                netmask=str(netaddr.spanning_cidr([nip,nip+2]).netmask)
            buf += " --netmask=%s"%netmask

            self.hostname=fields[4]
            # substitute device name with MAC, if ifname= was specified
            device = self.ifnames.get(fields[5],fields[5])
            buf += " --device=%s"%device
            bootproto = fields[6] if fields[6]<>"none" else "static"
            buf += " --bootproto=%s"%bootproto
        return buf

    def process_nameservers(self, line):
        # use the mkinstall nameserver(s), if specified
        ns=""
        if len(ns): return " "+ns

        # else
        # process optional nameserver= ; and, there can be more than one
        # eg., nameserver=8.8.8.8 nameserver=8.8.4.4    

        nameservers = re.findall('nameserver=[\S]+',line, re.DOTALL)
        nslist = []
        for nameserver in nameservers:
            ip=nameserver.split("=")[1].strip()
            if len(ip):
                nslist.append(ip)
        if not nslist:
            return ''
        buf = " --nameserver=%s" % ','.join(nslist)
        return buf

    def process_lag(self, line):
        # process optional bond=
        # eg,. bond=lag_mgmt0:eth2,eth4:mode=802.3ad,miimon=100,xmit_hash_policy=layer3+4,lacp_rate=fast
        bonds = re.findall('bond=[\S]+',line, re.DOTALL)
        bond = "" if len(bonds)==0 else bonds[-1]
        fields=bond.split(":")
        buf=""
        if len(fields)==3:
            buf += " --bondslaves=%s"%fields[1]
            buf += " --bondopts=%s"%fields[2]
        return buf

    def run(self):
        network=""
        network+=self.process_ip(self.cmdline)
        network+=self.process_lag(self.cmdline)
        network+=self.process_nameservers(self.cmdline)
        network+=self.get_hostname()
        network = "network %s\n" % network.strip()

        # network should look something like for a setup with lag:
        # network
        #   --ip=10.2.175.130
        #   --gateway=10.2.175.129
        #   --netmask=255.255.255.224
        #   --hostname=mtrl02ehpc001.lcdnstaging.iptv.example.local
        #   --device=lag_mgmt0
        #   --bootproto=static
        #   --nameserver=10.2.175.28
        #   --bondslaves=eth2,eth4 
        #   --bondopts=mode=802.3ad,miimon=100,xmit_hash_policy=layer3+4,lacp_rate=fast

        # write out node-specific node-install network configuration
        with open('/tmp/network.cmd','w') as fp: fp.write(network)

if __name__ == "__main__":
    with open('/proc/cmdline') as fp: cmdline = fp.read().strip()
    k = ksnetwork(cmdline)
    k.run()

__EOF__
%end

%pre --erroronfail --log /tmp/ks-pre-partition.log
# Writes partition.cmd
python << __EOF__
#! /usr/bin/python
import os
import sys
import stat
import subprocess
import re

# Calculate disk partition sizes.
# Algorithms swiped from bootmanager/source/steps/InstallPartitionDisks.py
# Numbers swiped from bootmanager/source/configuration
# Converted from G (in configuration) to M for kickstart units.

# this sets the size of the root logical volume,
# after the root and swap has been created, remaining
# goes to the vserver partition

root_size       = 4*1024        # Observed: 1.1G

# override the swap size
swap_size       = 4*1024

# Set maxima and minima

# mininum and maximum allowed disk space for CORE_SIZE
core_max_size       = 128*1024
core_min_size       = 1*1024

# These are policy-driven heuristics, and SWAGs at this point.
var_min_size        = 10*1024
vservers_min_size   = 16*1024   # Largest observed: 8.7G
culog_min_size      = 10*1024

# Set the vservers size
vservers_size       = 32*1024

# Size of boot partition
boot_size           = 2*1024

# Room for customer-facing logs
culog_size          = 100*1024

# Emit kickstart command into this command file.
pfile = open('/tmp/partition.cmd', 'w')

# kickstart file passes this, templated by mkinstall
preserve_log = False

# Were we booted with EFI?
have_efi = os.path.isdir('/sys/firmware/efi')

# Discover the amount of main memory.
try:
    with open('/proc/meminfo') as m:
        for line in m.readlines():
            if line.startswith('MemTotal'):
                kmem = int(line.split()[1])
                break
except:
    print >> pfile, '# WARNING: Cannot determine memory size!'
    kmem = 0

# Check memory size?  FIXME

# Core partition is intended to be twice main memory size, and should be in MB.
core_size = (2*kmem)/1024
if core_size > core_max_size:
    core_size = core_max_size
elif core_size < core_min_size:
    core_size = core_min_size

# Discover the boot disk.
bootdisk = "bootdisk="
bootmodel = "bootmodel="
boot_label = "planetlab-boot"

def is_blk(path):
    return stat.S_ISBLK(os.stat(path).st_mode)

def run(cmd):
    sub = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = sub.communicate()
    return (out, err, sub.returncode)

def list_disks():
    '''Returns a dictionary containing:
       disk: [vda, vdb]         (candidates, perhaps bootdisk=, perhaps smallest raid)
       raid: True               (if raid enabled)
       bdisk: "bootdisk=*".split('=')[1]
    '''
    # VCDNB_47696 Always use a disk if labeled as BOOT_LABEL.
    # If there's a BOOT_LABEL, and we pick a different disk,
    # then formatting will fail later with duplicate labels.
    # Users must remove the existing labels first if they want
    # to force a different disk.
    #
    # On upgrades we always want to use BOOT_LABEL, no matter what,
    # As the Anaconda disk selection is looking for it.
    #
    # /dev/disk/by-label is symlink to /dev/xxx which is a partition
    try:
        part = os.path.join('/dev/disk/by-label', os.readlink('/dev/disk/by-label/%s' % boot_label))

        # Check to make sure it's block device.
        if part and is_blk(part):
            # Find the parent device of the partition's block device
            # And check it's real
            (disk, err, returncode) = run("lsblk -no pkname %s" % part)
            if disk:
                disk = disk.strip()
            if returncode == 0 and disk and os.path.isdir("/sys/block/%s" % disk):
                return { 'disks': [disk] }
    except OSError:
        pass

    cmdline = open('/proc/cmdline').read()
    cmdline+=" ".join(sys.argv[1:]) if len(sys.argv)>1 else ""

    if bootmodel in cmdline:
        # VCDNB-xxxx: We search for the installation disk using the "bootmodel=..." kernel command line item.
        disks = []
        models = re.findall('%s[\S]*'%bootmodel, cmdline, re.DOTALL)
        if len(models):
            for d in os.listdir("/sys/block"):
                modelfname = os.path.join("/sys/block",d,"device/model")
                if not os.path.exists(modelfname): continue
                with open(modelfname,"r") as fb: devicemodel=fb.read().strip()
                for model in models:
                    model=model.split("=")[1]
                    if model in devicemodel:
                        disks.append(d)
        if len(disks)==1:
            return { 'disks': disks, 'bdisk': disks[0] }
        elif len(disks)==2:
            # REVISIT: Need a separate flag that we want software RAID
            # return { 'disks': disks, 'raid': True, 'bdisk': ",".join(disks) }
            # CAVEAT: pretending to do single disk setup like above
            return { 'disks': [disks[0]], 'bdisk': disks[0] }
        elif len(disks)>2:
            print '# unexpected for %s search to return %d disks. Aborting!' % (bootmodel,len(disks))
            print '# found the following disks %s' % ",".join(disks)
            sys.exit(1)

    if bootdisk in cmdline:
        # VCDNB-45686: We take the installation disk from a "bootdisk=..." kernel command line item.
        bdisk = [d for d in cmdline.split() if d.startswith(bootdisk)][0].split('=')[1]
        if ',' in bdisk:
            # We specify RAID disks with a comma-separated bootdisk=... list.
            raid = bdisk.split(',')
            # RAID1 assumption.  FIXME?
            if len(raid) != 2:
                print >> pfile, '# Only 2 RAID candidates allowed: %s' % bdisk
                sys.exit(1)
            return { 'disks': raid, 'raid': True, 'bdisk': bdisk }
        return { 'disks': [bdisk], 'bdisk': bdisk }

    return { 'disks': sorted(os.listdir('/sys/block')) }

ddict = list_disks()

print >> pfile,  '# ddict: %s' % ddict

if not ddict.get('disks', False):
    print >> pfile, '# no disks found in ddict: %s' % ddict
    sys.exit(1)

# Check all drives, even bootdisk=...
# RAID can reassemble the list of checked drives.

ok_disks = []
for d in ddict['disks']:
    # VCDNB-45775: Suitability checks.

    block = '/sys/block/%s' % d

    # isdir() is OK with symlinks to directories.
    if not os.path.isdir(block):
        continue

    # No logical volumes leftover from past lives.
    if os.path.islink(block) and 'virtual' in os.readlink(block):
        continue

    # Is the disk removable?
    rm = '%s/removable' % block
    if os.path.exists(rm) and open(rm).read().strip() == '1':
        continue

    # Is the disk read-only?
    ro = '%s/ro' % block
    if os.path.exists(ro) and open(ro).read().strip() == '1':
        continue

    # Is the disk big enough?  This is the number of 512-byte blocks in 79G.
    # We use that number because 5.xx test nodes use 80G disks, and nothing ever goes away!
    # If the pseudo file contains non-numerics, this will mysteriously fail.
    sz = '%s/size' % block
    try:
        if os.path.exists(sz) and int(open(sz).read().strip()) < 165675008:
            continue
    except:
        continue

    # VCDNB-46569: Ignore NVMe disks, unless we're EFI
    if d.startswith('nvme') and not have_efi:
        continue

    # Anything else to check?

    ok_disks.append(d)

# Did we find any?
if not ok_disks:
    print >> pfile, '# No suitable disk found.'
    sys.exit(1)

# for bootdisk=..., (raid or not) our approved set must match the provided set.
if ddict.get('bdisk', False):
    if sorted(ok_disks) != sorted(ddict['disks']):
        print >> pfile, '# bootdisk: ok_disks(%s) != disks(%s)' % (ok_disks, ddict['disks'])
        sys.exit(1)

# Use one of the candidates to test sizes.
disk = ok_disks[0]

# Discover the size of the install disk.
# The kickstart file wants MB.
try:
    dmeg = int(open('/sys/block/%s/size' % disk).read().strip()) / 2048
except:
    print >> pfile, 'Cannot get disk %s size' % disk
    sys.exit(1)

# VCDNB-45697: BIOS disks > 2TB need a special biosboot partition.
if dmeg > 2000000 and not have_efi:
    bios_size = 1
    bios_part = "{verb} biosboot --fstype=biosboot {bios_ex}"
else:
    bios_size = 0
    bios_part = "# No biosboot partition"

# Max size of (potential) EFI partition
if have_efi:
    efi_size = 200
    efi_part="{verb} /boot/efi --fstype=efi --label=BOOT-EFI {efi_ex}"
else:
    efi_size = 0
    efi_part="# No efi partition"

# We use one logical volume: aura
# /var/log/customerlog uses 1/3 of logs, /var/log uses the rest.
# Therefore, the /vservers and /var/log partitions absorb any arithmetic slop.

# Write out the commands for disk partitioning.

# Resize the volumes if necessary.

fixed_size = boot_size + root_size + swap_size + efi_size + bios_size
flex_size = dmeg - fixed_size

min_size = vservers_min_size + core_min_size + var_min_size + culog_min_size
print >> pfile, '# %s %d fixed %d flex %d min %d min+fixed %d' % (disk, dmeg, fixed_size, flex_size, min_size, fixed_size+min_size)
print >> pfile, '# Desired: %d' % (fixed_size + core_size + vservers_size + culog_size)

# Do we have enough room left for the minimal sizes?

if flex_size < min_size:
    print >> pfile,  '# Disk too small: flex %d - vservers_min %d - core_min %d - culog_min %d < var_min %d' % (flex_size, vservers_min_size, core_min_size, culog_min_size, var_min_size)
    sys.exit(1)

# Shrink core and vservers until we do.
while flex_size - vservers_size - core_size - culog_size < var_min_size:
    print >> pfile,  '# flex %d vservers %d core %d culog %d var_min %d' % (flex_size, vservers_size, core_size, culog_size, var_min_size)

    if vservers_size == vservers_min_size and core_size == core_min_size:
        print >> pfile,  '# Ran out of space: vservers_min %d core_min %d' % (vservers_min_size, core_min_size)
        sys.exit(1)

    # Policy: core cuts faster than vservers.
    core_size /= 2
    if core_size < core_min_size:
        core_size = core_min_size

    vservers_size = (vservers_size*3)/4
    if vservers_size < vservers_min_size:
        vservers_size = vservers_min_size

    # Policy: culog_size starts out large, shrinks fast if the disk isn't large.
    culog_size = culog_size/2
    if culog_size < culog_min_size:
        culog_size = culog_min_size

print >> pfile,  '# final: flex %d vservers %d core %d culog %d var_min %d' % (flex_size, vservers_size, core_size, culog_size, var_min_size)

# These are in a dictionary instead of a list so that we can append to the strings depending on preserve_log (q.v.)
part = {
     "bios": bios_part,
     "efi": efi_part,
     "boot": "{verb} /boot --fstype=ext3 --label=%s {boot_ex}" % (boot_label),
     "lvm1": "{verb} pv.01 {lvm_ex}",
}

if ddict.get('raid', False):
    # NOTE: This code implements RAID1 with two drives.
    raiders = ddict['bdisk']
    verb = 'raid'
    print >>pfile, '# Create RAID partitions on %s' % raiders
    for ndx, d in enumerate(ok_disks, 1):
        # Write a raid partition line for each hard partition
        if bios_size:
            print >> pfile, 'part raid.%s1 --size %d --asprimary --ondisk=%s' % (ndx, bios_size, d)
        if efi_size:
            print >> pfile, 'part raid.%s2 --size %d --asprimary --ondisk=%s' % (ndx, efi_size, d)
        print >> pfile, 'part raid.%s3 --size %d --asprimary --ondisk=%s' % (ndx, boot_size, d)
        print >> pfile, 'part raid.%s4 --size 1 --grow --asprimary --ondisk=%s' % (ndx, d)

    # N.B.: In raid, /boot must be RAID1.
    bios_ex = '--device=bios  --level=RAID1 raid.11 raid.21'
    efi_ex  = '--device=efi   --level=RAID1 raid.12 raid.22'
    boot_ex = '--device=boot  --level=RAID1 raid.13 raid.23'
    lvm_ex  = '--device=pv.01 --level=RAID1 raid.14 raid.24'
    ignoredisk = "ignoredisk --only-use=%s" % raiders
    clearpart = "clearpart --drives=%s --all" % raiders
    ondisk = ''
else:
    verb = 'part'
    bios_ex = '--asprimary --size=%s' % bios_size
    boot_ex = '--asprimary --size=%s' % boot_size
    efi_ex = '--asprimary --grow --maxsize=%s --size=50' % efi_size
    lvm_ex = '--size=1 --grow'
    ignoredisk = "ignoredisk --only-use=%s" % disk
    clearpart = "clearpart --drives=%s --all" % disk
    ondisk = " --ondisk=%s" % disk

# It gets ugly to try to save customer log and thus keep existing partitions
# Modify the bits to match what ks wants
if preserve_log:
    # Keeping one partition, keeps them all!
    exist = " --useexisting"
    clearpart = "clearpart --none"
    efi_ex += " --onpart=LABEL=BOOT-EFI"
    boot_ex += " --onpart=LABEL=%s" % boot_label
    part["lvm1"] = "# Leave aura alone"
    vol_arg = exist
    act = "Keep"
else:
    # Wipe out all current partitions on the install disk.
    exist = ""
    # VCDNB-45905: We never erase the non-install disks.
    vol_arg = "pv.01"
    bios_ex += ondisk
    efi_ex += ondisk
    boot_ex += ondisk
    lvm_ex += ondisk
    act = "Create"

# We have all the info needed to customize the definitions.
fmt = {'disk': disk, 'verb': verb, 'bios_ex': bios_ex, 'boot_ex': boot_ex, 'efi_ex': efi_ex, 'lvm_ex': lvm_ex}

# We can start printing the real file now.
print >> pfile, "# General parameters"
print >> pfile, "bootloader"
print >> pfile, ignoredisk
print >> pfile, clearpart
print >> pfile, "zerombr"

print >> pfile,  "# %s Disk Partitions" % act

# print >> pfile, '# fmt: %s' % fmt
print >> pfile,  "\n".join([part["bios"], part["efi"], part["boot"], part["lvm1"]]).format(**fmt)

print >> pfile,  "volgroup aura {} --pesize=32768".format(vol_arg)

print >> pfile,  "# %s LVM Volumes\n" % ("Reformat" if preserve_log else "Create")

# Generate the logical volumes lines
culog = "/var/log/customerlog"
vols = [("swap",      {"name":"swap",     "fst":None,   "sz":swap_size}),
        ("/",         {"name":"root",     "fst":"ext3", "sz":root_size}),
        ("/vservers", {"name":"vservers", "fst":"ext3", "sz":vservers_size}),
        ("/var/core", {"name":"core",     "fst":"ext3", "sz":core_size}),
        (culog,       {"name":"culog",    "fst":"ext3", "sz":culog_size}),
        ("/var",      {"name":"var",      "fst":"ext3", "sz":"1 --grow"})
]

try:
    for (vol, args) in vols:
        fstype = (' --fstype=%s' % args['fst']) if args['fst'] else ''
        e = ' --noformat' if vol == culog and preserve_log else exist
        print >> pfile,  "logvol %s --vgname=aura --name=%s --size=%s%s%s" % (
              vol, args["name"], args["sz"], fstype, e)
except:
    import traceback
    for l in traceback.format_exc().splitlines():
        print >> pfile,  '# EXCEPTION: %s' % l
    print >> pfile,  '# Failure -- no volumes'
    sys.exit(1)

sys.exit(0)
__EOF__

# We signal an error if the disk allocation can't work.
ret=$?
cat /tmp/partition.cmd
if [ $ret != 0 ]
then
    exit $ret
fi
%end

%pre --erroronfail --log /tmp/ks-pre-stashing-files.log
#copy rootfs.img.gz,vmlinuz,initrd.img,ks_http.cfg off install media 
# for %post to install
tempdir=/tmp/repo
mkdir -p ${tempdir}

set - x
set - v
# VCDNB-47574: Show copy progress, in case the source (iLO, perhaps) is slow.
# This incantation sends stdout and stderr to the default tmux screen.
exec > /dev/pts/0 2>&1
URLP=https://anaconda:anaconda@mgmt.labcdnmgmt.byrnbaker.lab
ARGS="--location --connect-timeout 60 --max-time 3600 --insecure"
files="repo/mkinstall/rootfs.img.gz boot/vmlinuz boot/initrd.img repo/ks_http.cfg"
for file in $files
do
    URL=${URLP}/${file}
    curl "${URL}" ${ARGS} --output ${tempdir}/$(basename ${file})
done
%end

%post --nochroot --log /mnt/sysimage/var/log/anaconda/ks-post-unstashing-files.log
date
set -v
set -x

# Copy images saved in %pre into appropriate places:
ABC=/mnt/sysimage/boot/aura-boot-chooser
VABC=/mnt/sysimage/var/aura-boot-chooser-images
if [ -e /tmp/repo/ ]; then
   mkdir -p $ABC $VABC
   cp -p /tmp/repo/{vmlinuz,initrd.img,aura_squashfs.img,rootfs.img.gz} $ABC
   cp -p /tmp/repo/rootfs.img.gz $VABC
   # Save ks_http.cfg into $ABC twice
   cp -p /tmp/repo/ks_http.cfg $ABC
   cp -p /tmp/repo/ks_http.cfg $ABC/ks.cfg
fi
if [ -e /run/initramfs/squashed.img ]; then
    # Anaconda's /run/initramfs/squashed.img is the one we booted from
    cp -p /run/initramfs/squashed.img $VABC/squashfs.img
fi
if [ -e /run/install/repo/LiveOS/squashfs.img ]; then
    # Or it's on the Live disk
    cp -p /run/install/repo/LiveOS/squashfs.img $VABC
fi

# Copy keys saved (if any) into appropriate place
if [ -e /tmp/ssh/ ]; then
   cp -p /tmp/ssh/* /mnt/sysimage/etc/ssh
fi

# Copy salt keys (if any) into appropriate place
if [ -e /tmp/salt_pki_min/ ]; then
   cp -p /tmp/salt_pki_min/* /mnt/sysimage/etc/salt/pki/minion
fi

# Copy amc.yaml from the ISO into /boot
# Used by aura_mkroute
cp -p /run/install/repo/amc.yaml /mnt/sysimage/boot/amc.yaml

%end

%post --log /var/log/anaconda/ks-post-lag-fix.log
#! /bin/bash 
date
set -v
set -x

### LAG FIXUP
python << __EOF__
import os
import re
import sys

def get_device(line):
    # process ip=
    # eg., ip=10.2.175.130::10.2.175.129:255.255.255.224:mtrl02ehpc001.lcdnstaging.iptv.bell.local:lag_mgmt0:none 
    ips = re.findall('ip=[\S]*',line, re.DOTALL)
    # pick out the last ip=, if there is more than one
    ip = "" if len(ips)==0 else ips[-1][3:]
    fields = ip.split(":")
    device = fields[5] if len(fields)==7 else None
    return device
    
def get_slaves(line):
    # process optional bond=
    # eg,. bond=lag_mgmt0:eth2,eth4:mode=802.3ad,miimon=100,xmit_hash_policy=layer3+4,lacp_rate=fast
    bonds = re.findall('bond=[\S]+',line, re.DOTALL)
    bond = "" if len(bonds)==0 else bonds[-1]
    fields=bond.split(":")
    nics = fields[1].split(",") if len(fields)==3 else []
    return nics

def main(cmdline):
    device=get_device(cmdline)
    slaves=get_slaves(cmdline)
    if len(slaves) and device<>None:
        for slave in slaves:
            # REVISIT: might want to just write the ifcfg-$slave directly,
            # REVISIT: as the code in the next post section renames them.
            fname="/etc/sysconfig/network-scripts/ifcfg-bond-slave-%s"%slave
            if os.path.exists(fname): continue
            # no need to write HWADDR as that's done in the subsequent
            # kickstart code.
            buf = """# created by kickstart lag fixup
TYPE=Ethernet
ONBOOT=yes
SLAVE=yes
NAME=bond-slave-%(slave)s
DEVICE=%(slave)s
MASTER=%(device)s
""" % {"slave":slave,"device":device}

            print "Creating %s %s" % (fname, buf)
            with open(fname,"w") as fp:
                fp.write(buf)

if __name__ == "__main__":
    with open('/proc/cmdline') as fp: cmdline = fp.read().strip()
    main(cmdline)

__EOF__
%end

%post --log /var/log/anaconda/ks-post-misc-setup.log
#! /bin/bash 
# The whole point here is to get salt-minion up so it can do the things that config & puppet did.
date
set -v
set -x

# Determine setup info; /tmp/network.cmd isn't visible (we're chrooted).

FQDN=`hostname`
IPADDR=`hostname -I`

# If the file name is ifcfg-bond-slave-xxx, rename it to match salt's
# ifcfg-xxx naming, lest we have conflicts later
(
    # Enable nullglob so non-match is empty
    shopt -s nullglob
    DIR=/etc/sysconfig/network-scripts
    for slave in $DIR/ifcfg-bond-slave-*
    do
       ( . $slave
           [ -z "$DEVICE" -o -z "$MASTER" -o -z "$SLAVE" ] && continue
           [ "$SLAVE" != "yes" ] && continue
           echo "Renaming bond-slave from $slave to ifcfg-$DEVICE"
           mv -f $slave "$DIR/ifcfg-$DEVICE"
       )
    done
)

for eth in /etc/sysconfig/network-scripts/ifcfg-*
do
# Find the physical mac addr, add to ifcfg file, if missing.
# Keeps the device tied to the mac address so won't change on reboot
# (Use a subshell so vars are reset each time through loop)
    (   . $eth
        [ -z "$HWADDR" ] || continue                     # Already have HWADDR
        [ -z "$DEVICE" -o "$DEVICE" = "lo" ] && continue # Skip lo
                                 
        # Append the HWADDR to the ifcfg-xxx file
        # Output of ethtool -P is "Permanent address: xx:yy:zz.."
        HWADDR=$(ethtool -P "$DEVICE" | awk '{print $3}') 
        [ -z "$HWADDR" -o "$HWADDR" = "00:00:00:00:00:00" ] && continue
        echo "HWADDR=\"$HWADDR\"" >> $eth
    )
done

# If the file name is ifcfg-ibethX, rename it to ifcfg-ethX
(
    # Enable nullglob so non-match is empty
    shopt -s nullglob
    DIR=/etc/sysconfig/network-scripts
    for ibeth in $DIR/ifcfg-ibeth*
    do
       ( . $ibeth
           DEVICE=$(echo ${DEVICE} | sed 's,^ib,,')
           grep -v ^DEVICE $ibeth > "$DIR/ifcfg-$DEVICE"
           grep -v ^NAME $ibeth >> "$DIR/ifcfg-$DEVICE"
           echo "DEVICE=${DEVICE}" >> "$DIR/ifcfg-$DEVICE"
           rm -f $ibeth
       )
    done
)

# Also temporarily turn off gpgcheck.  FIXME!
sed -i 's/gpgcheck=1/gpgcheck=0/' /etc/yum.conf

echo 'username=repo' >> /etc/yum.conf
echo 'password=$repopasswd' >> /etc/yum.conf

# Do just enough to get salt-minion running.  NO MORE!

mkdir -p /etc/salt/pki/minion /etc/salt/minion.d

# Generic settings are installed by nacl-node.
# Using "api.aura" for master is problematic; it becomes grains[master],
# which is used in templates for the coplc's FQDN.
# In particular, puppet certs are generated for the FQDN,
# but grains[master] gets used to check it.
(
    echo "master: [api.aura]"
    echo master_type: failover
    echo master_alive_interval: 300
    echo retry_dns: 0
) > /etc/salt/minion.d/master.conf

echo id: $FQDN > /etc/salt/minion.d/id.conf

# Decide whether to use IPv6 to contact the salt master. 
# Policy: if we both have IPv6, that's what we'll use.



# VCDNB-48521: Make the minion re-establish communications quickly after rollover.
(
    echo '# Re-establish communications quickly after rollover.'
    echo 'ping_interval: 5  # Similar to master_alive_interval.'
    echo '# Avoid thundering herd.'
    echo '# recon_default: 1000'
    echo '# recon_max: 10000'
    echo '# recon_randomize: True'
) > /etc/salt/minion.d/recon.conf

# CentOS sets up their repos, but we want ours instead.
# So we remove the stock repos ...
rm -f /etc/yum.repos.d/CentOS*

# ... and add ours.
cat > /etc/yum.repos.d/kickstart.repo << EOF
[os]
Name=CentOS 7 OS
baseurl=http://repo:\$repopasswd@mgmt.labcdnmgmt.byrnbaker.lab:80/repo/centos/7/os/x86_64
enabled=1

[extras]
Name=CentOS 7 Extras
baseurl=http://repo:\$repopasswd@mgmt.labcdnmgmt.byrnbaker.lab:80/repo/extras/7/x86_64
enabled=1

[updates]
Name=CentOS 7 Updates
baseurl=http://repo:\$repopasswd@mgmt.labcdnmgmt.byrnbaker.lab:80/repo/centos/7/updates/x86_64
enabled=1

[epel]
name=Extra CentOS Packages
baseurl=http://repo:\$repopasswd@mgmt.labcdnmgmt.byrnbaker.lab:80/repo/epel/7/x86_64
enabled=1

[aura]
name=Akamai CentOS 7 RPMs
baseurl=http://repo:\$repopasswd@mgmt.labcdnmgmt.byrnbaker.lab:80/repo/install-rpms/archive/coblitz/coblitz-centos7-x86_64/RPMS
enabled=1
EOF

# VCDNB-45852: and set up the repo password.
# Dashes don't work in yum variable names, dangit.
# More annoyingly, underscores work in c7, but not in c6...
mkdir -p /etc/yum/vars
cp -f /etc/akamai-release /etc/yum/vars/repopasswd

# This loads conntrack at boot time, so when we load a better table,
# it doesn't blow away existing connections, such as salt.
for p in iptables ip6tables
do  cat > /etc/sysconfig/$p << EOF
*filter
:INPUT ACCEPT
:FORWARD ACCEPT
:OUTPUT ACCEPT
-A INPUT -m state --state INVALID -j DROP
COMMIT
EOF
systemctl enable $p
done

# Workable minimum hosts file.  Overwritten later by salt.
# These are hard tabs.  I'm old-fashioned.
cat > /etc/hosts << EOF
# Templated by node-installer/ks.cfg
127.0.0.1	localhost localhost4
::1		localhost localhost6
EOF

for ip in $IPADDR
do
    echo "$ip	$FQDN" >> /etc/hosts
done

# Before starting the minion, we have to set up dnsmasq

# VCDNB-48031: dnsmasq uses the configured resolvers as default.
# This is done here so that we're sure that anaconda has written out resolv.conf.

# saltstack-network-formula puts updated resolver info in resolv.aura.

mv /etc/resolv.conf /etc/resolv.aura
grep -v "nameserver" /etc/resolv.aura > /etc/resolv.conf
echo "# Edited by ks.cfg" >> /etc/resolv.conf
echo "nameserver 127.0.0.1" >> /etc/resolv.conf

# VCDNB-48032: Generate the dnsmasq config file.
# Also templated by nacl/.../aura.conf.template  KEEP IN SYNC

DNSMASQ=/etc/dnsmasq.d/aura.conf
(
    echo "# Templated by ks.cfg"
    # Don't cache NXDOMAIN, might happen during rollover (FIXME?)
    echo "no-negcache"
    # Notice a coplc rollover quickly
    echo "all-servers"

    # Rely on update_resolv.sh to poke dnsmasq when resolv.aura changes.
    echo "no-poll"

    # Don't forward short queries
    # To forward them to coplc: server=//$ip
    echo "domain-needed"

    # We only listen on loopback
    echo "interface=lo"
    echo "bind-interfaces"

    echo "log-facility=-"
    echo "group=log"

    # Redirect queries for *.aura or the coplc name(s) to the coplc.
    # www_ip contains all of the MIPs, and does not contain duplicates.
    if [[ "192.168.220.10" = *\ * ]]
    then
        # There are multiple MIPs, Geo-HA configuration, query all of them.
        for ip in 192.168.220.10
        do
            echo "server=/aura/mgmt.labcdnmgmt.byrnbaker.lab/$ip#5353"
        done
    else
        # There's only one, and we know what it is.
        echo host-record=mgmt.labcdnmgmt.byrnbaker.lab,192.168.220.10
        echo address=/aura/192.168.220.10
    fi

    # Updated by salt via saltstack-network-formula/network/defaults.yaml
    echo "resolv-file=/etc/resolv.aura"
) > $DNSMASQ

# Install the authorized SSH key.
cat > /etc/ssh/root_ssh_key.pub << 'EnD_oF_sSh_KeY'
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDJ9ZocB9dqLSLjSA08C+wP7ouDFE5NveAvwUQhG7LZLqauf8HVULpVSFfTJiXpMGOroXxnly4wUahj0fviCd0oymByXgAV5MeIOCb5k7WnlmKd+hwVaFSb9ZCI9ewDOBavJ6LnzErgvWZHJmbtt39cpQU8T5R664S9DpqoATgZKQ== nceast_control Central <root+support@localhost.localdomain>

EnD_oF_sSh_KeY
chmod 600 /etc/ssh/root_ssh_key.pub

mkdir -p /root/.ssh/
chmod 700 /root/.ssh
cp -p /etc/ssh/root_ssh_key.pub /root/.ssh/authorized_keys

# Install our sshd_config
cp /etc/ssh/sshd_config.nacl /etc/ssh/sshd_config

# Make sure the group on some keys is ssh_keys
# (seems ssh_keys GID can move across versions)
# Assume any group that ISN'T root needs to be changed to ssh_keys
# (else we need to save old group number, and...ugh)
find /etc/ssh \! -group 0 -exec chgrp ssh_keys {} \;

# Run aura_mksquash to build the update images and grub entries
# so when we reboot, there's something to boot from!

# Produce a resolv.conf that will be useful then.
(
    echo '# Produced by ks.cfg'
    for ip in 192.168.220.10
    do
        echo nameserver $ip
    done
) > /etc/resolv.mksquash
/usr/bin/aura_mksquash

# Flag this node was just installed
touch /boot/aura-installed

date
%end

%post --log /var/log/anaconda/ks-grub.log
# VCDNB-45657: remove net.ifnames=0 from grub's default configuration and regenerate grub.cfg.
# VCDNB-45741: also remove rhgb and quiet.
# Disable biosdevname helper of udevd to stop renaming of devices by udev 
set -v
set -x

if egrep -q 'ifnames=0|rhgb|quiet|biosdevname=1' /etc/default/grub
then
    sed -i -e 's/biosdevname=1/biosdevname=0/' -e 's/ifnames=0/ifnames=1/' -e 's/ *rhgb */ /g' -e 's/ *quiet */ /g' /etc/default/grub

    # Regenerate the grub configuration files.
    grub2-mkconfig -o /boot/grub2/grub.cfg
    if [ -d /sys/firmware/efi ]; then
        grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg
    fi
fi
%end

# Keep this one last!
%post --nochroot --log /mnt/sysimage/var/log/anaconda/ks-copy-post.log

set -x

# copy logs and cmd files from pre while we are here:
cp -vfp /tmp/*.log /tmp/*.cmd /mnt/sysimage/var/log/anaconda/

%end

